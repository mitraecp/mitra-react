// Polyfill ultra-robusto para compatibilidade com Radix UI
(function() {
  console.log('üîß Carregando polyfill ultra-robusto para window.Image...');

  if (typeof window !== 'undefined') {
    console.log('üìä Estado inicial - window.Image:', typeof window.Image, window.Image);

    // Salvar refer√™ncia original se existir
    const originalImage = window.Image;

    // Criar constructor ultra-robusto
    function UltraImagePolyfill(width, height) {
      console.log('üñºÔ∏è UltraImagePolyfill chamado com:', width, height);

      // Criar elemento img
      const img = document.createElement('img');

      // Aplicar dimens√µes se fornecidas
      if (typeof width === 'number' && width > 0) img.width = width;
      if (typeof height === 'number' && height > 0) img.height = height;

      // Retornar o elemento img
      return img;
    }

    // Configurar prototype e constructor
    UltraImagePolyfill.prototype = HTMLImageElement.prototype;
    UltraImagePolyfill.prototype.constructor = UltraImagePolyfill;

    // Adicionar propriedades est√°ticas necess√°rias
    Object.defineProperty(UltraImagePolyfill, 'name', {
      value: 'Image',
      writable: false,
      configurable: false
    });

    // Substituir window.Image de forma definitiva
    Object.defineProperty(window, 'Image', {
      value: UltraImagePolyfill,
      writable: true,
      configurable: true,
      enumerable: true
    });

    // Garantir HTMLImageElement
    if (!window.HTMLImageElement) {
      window.HTMLImageElement = HTMLImageElement;
    }

    // Interceptar e redirecionar qualquer tentativa de usar Image
    const imageHandler = {
      construct: function(target, args) {
        console.log('üéØ Image constructor interceptado:', args);
        return UltraImagePolyfill.apply(null, args);
      },
      apply: function(target, thisArg, args) {
        console.log('üéØ Image function interceptado:', args);
        return UltraImagePolyfill.apply(null, args);
      }
    };

    // Aplicar proxy se dispon√≠vel
    if (typeof Proxy !== 'undefined') {
      window.Image = new Proxy(UltraImagePolyfill, imageHandler);
    }

    // Verifica√ß√£o final
    console.log('‚úÖ Polyfill ultra-robusto aplicado!');
    console.log('üìä window.Image final:', typeof window.Image, window.Image);
    console.log('üß™ Teste new Image():', new window.Image());
    console.log('üß™ Teste Image():', window.Image());
    console.log('üîç window.Image.prototype:', window.Image.prototype);
    console.log('üîç window.Image.constructor:', window.Image.constructor);

    // Monitorar tentativas de redefini√ß√£o
    let imageAccessCount = 0;
    Object.defineProperty(window, '_imageAccessCount', {
      get: function() { return imageAccessCount; },
      set: function(val) {
        imageAccessCount = val;
        console.log('üìà Image acessado', imageAccessCount, 'vezes');
      }
    });

    // Verificar se pode proteger contra redefini√ß√µes
    try {
      const originalDescriptor = Object.getOwnPropertyDescriptor(window, 'Image');
      if (originalDescriptor && originalDescriptor.configurable !== false) {
        console.log('üîí Tentando proteger window.Image contra redefini√ß√µes...');
        // N√£o tentar redefinir se j√° foi definido como n√£o configur√°vel
      } else {
        console.log('‚ö†Ô∏è window.Image j√° est√° protegido ou n√£o pode ser protegido');
      }
    } catch (e) {
      console.warn('‚ö†Ô∏è Erro ao verificar prote√ß√£o:', e.message);
    }
  }
})();
